{"version":3,"sources":["../../../source/Tokenizer/StemmingTokenizer.js"],"names":["StemmingTokenizer","stemmingFunction","decoratedTokenizer","_stemmingFunction","_tokenizer","text","tokenize","map"],"mappings":";;;;;;;;;;AAMA;;;;;;;;;IASaA,iB,WAAAA,iB;;AAIX;;;;;;AAMA,6BACEC,gBADF,EAEEC,kBAFF,EAGE;AAAA;;AACA,SAAKC,iBAAL,GAAyBF,gBAAzB;AACA,SAAKG,UAAL,GAAkBF,kBAAlB;AACD;;AAED;;;;;;;6BAGSG,I,EAA+B;AACtC,aAAO,KAAKD,UAAL,CACJE,QADI,CACKD,IADL,EAEJE,GAFI,CAEA,KAAKJ,iBAFL,CAAP;AAGD;;;;;;AACF","file":"StemmingTokenizer.js","sourcesContent":["// @flow\n\nimport type { ITokenizer } from './Tokenizer';\n\ntype StemmingFunction = (text : string) => string;\n\n/**\n * Stemming is the process of reducing search tokens to their root (or stem) so that searches for different forms of a\n * word will match. For example \"search\", \"searching\" and \"searched\" are all reduced to the stem \"search\".\n *\n * <p>This stemming tokenizer converts tokens (words) to their stem forms before returning them. It requires an\n * external stemming function to be provided; for this purpose I recommend the NPM 'porter-stemmer' library.\n *\n * <p>For more information see http : //tartarus.org/~martin/PorterStemmer/\n */\nexport class StemmingTokenizer implements ITokenizer {\n  _stemmingFunction : StemmingFunction;\n  _tokenizer : ITokenizer;\n\n  /**\n   * Constructor.\n   *\n   * @param stemmingFunction Function capable of accepting a word and returning its stem.\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  constructor(\n    stemmingFunction : StemmingFunction,\n    decoratedTokenizer : ITokenizer\n  ) {\n    this._stemmingFunction = stemmingFunction;\n    this._tokenizer = decoratedTokenizer;\n  }\n\n  /**\n   * @inheritDocs\n   */\n  tokenize(text : string) : Array<string> {\n    return this._tokenizer\n      .tokenize(text)\n      .map(this._stemmingFunction);\n  }\n};\n"]}